package ${packageName}.controller;


import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import lombok.AllArgsConstructor;
import java.util.Arrays;
import java.util.List;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import javax.validation.constraints.NotBlank;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.hone.core.boot.ctrl.BaseController;
import com.hone.core.mp.support.Query;
import com.cosmo.conduct.common.Condition;
import com.hone.core.tool.api.R;
import com.hone.core.tool.utils.Func;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;
#if($table.crud || $table.sub)
#elseif($table.tree)
#end


/*
 * 文件名：${functionName}Controller.java
 * 版权： Copyright by COSMOPlat
 * 描述： ${functionName}控制器
 * 修改人：  ${author}
 * 修改时间：${datetime}
 * 跟踪单号：
 * 修改单号：
 * 修改内容：
 */
@Api(tags = "${functionName}")
@RestController
@AllArgsConstructor
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController{

    private I${ClassName}Service ${className}Service;

    /**
    * 详情
    */
    @GetMapping("/detail")
    @ApiOperationSupport(order = 1)
    @ApiOperation(value = "详情", notes = "传入${className}")
    public R<${ClassName}> detail(${ClassName} ${className}) {
        ${ClassName} detail = ${className}Service.getOne(Condition.getQueryWrapper(${className}));
        return R.data(detail);
    }

    /**
     * 分页
     */
    @GetMapping("/list")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "category", value = "公告类型", paramType = "query", dataType = "integer"),
            @ApiImplicitParam(name = "title", value = "公告标题", paramType = "query", dataType = "string")
    })
    @ApiOperationSupport(order = 2)
    @ApiOperation(value = "分页", notes = "传入${className}")
    public R<IPage<${ClassName}>> list(@ApiIgnore @RequestParam Map<String, Object>  ${className}, Query query) {
        IPage<${ClassName}> pages = ${className}Service.page(Condition.getPage(query), Condition.getQueryWrapper(${className}, ${ClassName}.class));
        return R.data(pages);
    }




    #*   @ApiOperation(value = "${functionName}导出列表", notes = "导出${functionName}的记录")
       @PreAuthorize(hasPermi = "${permissionPrefix}:export")
      // @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
       @PostMapping("/export")
       public void export(HttpServletResponse response, ${ClassName} ${className}) throws IOException
       {
           List<${ClassName}> list = ${className}Service.list(new QueryWrapper<>(${className}));
           ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
           util.exportExcel(response, list, "${functionName}数据");
       }*#

    /**
     * 新增
     */
    @PostMapping("/save")
    @ApiOperationSupport(order = 3)
    @ApiOperation(value = "新增", notes = "传入${className}")
    public R save(@RequestBody ${ClassName} ${className}) {
        return R.status(${className}Service.save(${className}));
    }

    /**
     * 修改
     */
    @PutMapping ("/update")
    @ApiOperationSupport(order = 4)
    @ApiOperation(value = "修改", notes = "传入${className}")
    public R update(@RequestBody ${ClassName} ${className}) {
        return R.status(${className}Service.updateById(${className}));
    }


    /**
	 * 删除
	 */
    @DeleteMapping("/remove")
    @ApiOperationSupport(order = 6)
    @ApiOperation(value = "逻辑删除", notes = "")
    public R remove(@ApiParam(value = "主键集合") @RequestParam String ids) {
        boolean temp = ${className}Service.deleteLogic(Func.toLongList(ids));
        return R.status(temp);
    }


}
